{"version":3,"sources":["webpack:///./src/app/layout/layout-routing.module.ts","webpack:///./src/app/layout/layout.component.html","webpack:///./src/app/layout/layout.component.scss","webpack:///./src/app/layout/layout.component.ts","webpack:///./src/app/layout/layout.module.ts","webpack:///./src/app/layout/topnav/top-nav.component.html","webpack:///./src/app/layout/topnav/top-nav.component.scss","webpack:///./src/app/layout/topnav/top-nav.component.ts"],"names":[],"mappings":"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","file":"layout-layout-module.js","sourcesContent":["import {NgModule} from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\n\nimport {LayoutComponent} from './layout.component';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: LayoutComponent,\n        children: [\n            {\n                path: '',\n                loadChildren: '../contents/content.module#ContentModule'\n            }\n        ]\n    }\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule]\n})\nexport class LayoutRoutingModule {\n}\n","module.exports = \"<app-top-nav></app-top-nav>\\n<app-sidebar *ngIf=\\\"isShowingSideBar\\\"></app-sidebar>\\n<div [ngClass]=\\\"{'main-container': isShowingSideBar}\\\">\\n    <router-outlet></router-outlet>\\n    <button class=\\\"fab-add\\\" *ngIf=\\\"!isShowingAddForm\\\" (click)=\\\"showAddForm()\\\" mat-fab color=\\\"accent\\\"><mat-icon>add</mat-icon></button>\\n</div>\\n\"","module.exports = \".trip-container {\\n  position: absolute;\\n  top: 64px;\\n  left: 0;\\n  right: 0;\\n  bottom: 0; }\\n\"","import {Component, OnInit} from '@angular/core';\nimport {MainService, UserService} from '../shared/services';\nimport {Level, RouteConfig} from '../shared/configs';\nimport {LogUtil} from '../shared/utils';\nimport {Router} from '@angular/router';\n\n@Component({\n    selector: 'app-layout',\n    templateUrl: './layout.component.html',\n    styleUrls: ['./layout.component.scss']\n})\nexport class LayoutComponent implements OnInit {\n\n    constructor(private userService: UserService,\n                private mainService: MainService,\n                private router: Router) {\n    }\n\n    ngOnInit() {\n    }\n\n    get isShowingSideBar(): boolean {\n        return this.mainService.isShowingSideBar();\n    }\n\n    get isShowingAddForm(): boolean {\n        return this.mainService.isShowingAddForm();\n    }\n\n    showAddForm() {\n        const managedUserLevel = this.userService.getManagedUserLevel();\n        let routeLabel = '';\n        if (managedUserLevel === Level.DISPATCHER) {\n            routeLabel = RouteConfig.ROUTE_ADD_DISPATCHER;\n        } else if (managedUserLevel === Level.CORPORATE_CLIENT) {\n            routeLabel = RouteConfig.ROUTE_ADD_CORPORATE;\n        } else if (managedUserLevel === Level.CUSTOMER) {\n            routeLabel = RouteConfig.ROUTE_ADD_CUSTOMER;\n        } else if (managedUserLevel === Level.DRIVER) {\n            routeLabel = RouteConfig.ROUTE_ADD_DRIVER;\n        } else if (managedUserLevel === Level.SUPERVISOR) {\n            routeLabel = RouteConfig.ROUTE_ADD_SUPERVISOR;\n        } else {\n            routeLabel = null;\n            LogUtil.AlertNag('Invalid managed user level for show AddForm');\n        }\n        if (routeLabel !== null) {\n            this.router.navigate([routeLabel]).catch(\n                reason => {\n                    LogUtil.ConsoleNag(`Could not navigate to route: ${routeLabel}, reason: ${reason}`);\n                }\n            );\n        }\n    }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n    MatButtonModule,\n    MatIconModule,\n    MatInputModule,\n    MatListModule,\n    MatMenuModule,\n    MatSidenavModule,\n    MatToolbarModule,\n    MatCardModule,\n    MatExpansionModule,\n} from '@angular/material';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { SidebarComponent } from './sidebar/sidebar.component';\nimport { TopNavComponent } from './topnav/top-nav.component';\nimport { LayoutRoutingModule } from './layout-routing.module';\nimport { LayoutComponent } from './layout.component';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { FormsModule } from '@angular/forms';\nimport { MatBadgeModule } from '@angular/material/badge';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FlexLayoutModule,\n        LayoutRoutingModule,\n        MatToolbarModule,\n        MatButtonModule,\n        MatSidenavModule,\n        MatIconModule,\n        MatInputModule,\n        MatMenuModule,\n        MatListModule,\n        MatCardModule,\n        MatExpansionModule,\n        TranslateModule,\n        MatBadgeModule,\n        FormsModule\n    ],\n    declarations: [LayoutComponent, TopNavComponent, SidebarComponent]\n})\nexport class LayoutModule { }\n","module.exports = \"<mat-toolbar color=\\\"primary\\\" class=\\\"fix-nav mat-elevation-z6\\\">\\n\\n    <button type=\\\"button\\\" mat-icon-button class=\\\"visible-md\\\" (click)=\\\"toggleSidebar()\\\">\\n        <mat-icon aria-label=\\\"Side nav toggle icon\\\">menu</mat-icon>\\n    </button>\\n\\n    <div class=\\\"nav-brand\\\">\\n        <span class=\\\"user-level\\\" matTooltip=\\\"authUser.level\\\" aria-label=\\\"Label shows authenticated user's level\\\">{{ authUser.level[0] | uppercase }}</span>\\n        {{ 'ETTA Dispatcher Automation' | translate }}\\n    </div>\\n    <span class=\\\"nav-spacer\\\"></span>\\n    <div>\\n        <button mat-button (click)=\\\"showDefault()\\\">\\n            <mat-icon>Home</mat-icon>\\n            Home\\n        </button>\\n        <button mat-button (click)=\\\"showDispatcherPanel()\\\">\\n            <mat-icon>headset_mic</mat-icon>\\n            Dispatcher Panel\\n        </button>\\n        \\n    </div>\\n\\n\\n    <!-- profile -->\\n    <div class=\\\"nav-holder\\\">\\n        <div>\\n            <div>\\n                <button mat-button [matMenuTriggerFor]=\\\"profile\\\">\\n                    <img class=\\\"top-nav-avatar\\\" src = \\\"https://cdn3.iconfinder.com/data/icons/galaxy-open-line-gradient-i/200/contacts-512.png\\\"  /> \\n                    {{ authUser.name.split(' ')[0] }}\\n                </button>\\n                <mat-menu #profile=\\\"matMenu\\\">\\n                    <button mat-icon-button (click)=\\\"onLogOut()\\\" style=\\\"text-align: center; justify-content: center;\\\">\\n                        <mat-icon>exit_to_app</mat-icon> LOGOUT\\n                    </button>\\n                </mat-menu>\\n            </div>\\n            <!-- settings -->\\n            <div>\\n                <button class=\\\"hidden-sm\\\" mat-icon-button [matMenuTriggerFor]=\\\"settings\\\">\\n                    <mat-icon>more_vertical</mat-icon>\\n                </button>\\n\\n                <mat-menu #settings=\\\"matMenu\\\">\\n                    <button mat-menu-item [matMenuTriggerFor]=\\\"language\\\">\\n                        <mat-icon>translate</mat-icon>\\n                    </button>\\n                </mat-menu>\\n                <mat-menu #language=\\\"matMenu\\\">\\n                    <button mat-menu-item (click)=\\\"changeLang('en')\\\">\\n                        <span>{{ 'English' | translate }}</span>\\n                    </button>\\n                    <button mat-menu-item (click)=\\\"changeLang('am')\\\">\\n                        <span>{{ 'Amharic' | translate }}</span>\\n                    </button>\\n                </mat-menu>\\n            </div>\\n        </div>\\n    </div>\\n\\n</mat-toolbar>\\n\"","module.exports = \":host {\\n  display: block;\\n  position: fixed;\\n  left: 0;\\n  right: 0;\\n  top: 0;\\n  z-index: 1000; }\\n\\n.nav-brand {\\n  width: 215px;\\n  text-align: center; }\\n\\n.topnav-icon {\\n  text-decoration: none;\\n  display: flex;\\n  color: #fff; }\\n\\n.nav-spacer {\\n  flex: 1 1 auto; }\\n\\n.visible-md {\\n  display: none; }\\n\\n.visible-sm {\\n  display: none; }\\n\\n@media screen and (max-width: 992px) {\\n  .visible-md {\\n    display: block; } }\\n\\n@media screen and (max-width: 768px) {\\n  .visible-sm {\\n    display: block; }\\n  .nav-brand {\\n    width: 100%; } }\\n\\n@media screen and (max-width: 768px) {\\n  .hidden-sm {\\n    display: none; } }\\n\\nimg.top-nav-avatar {\\n  height: 40px;\\n  border-radius: 50%;\\n  width: 40px; }\\n\\nspan.user-level {\\n  font-size: 20px;\\n  padding: 0;\\n  display: inline-block;\\n  text-align: center;\\n  background-color: #ff4081;\\n  border-radius: 50%;\\n  width: 32px;\\n  height: 32px; }\\n\\ndiv.nav-holder {\\n  display: flex;\\n  flex-direction: column; }\\n\\ndiv.nav-holder > div {\\n    flex-direction: row;\\n    display: flex; }\\n\"","import {Component, OnInit} from '@angular/core';\nimport {Router, NavigationEnd} from '@angular/router';\nimport {TranslateService} from '@ngx-translate/core';\nimport {AuthService, MainService} from '../../shared/services';\nimport {RouteConfig} from '../../shared/configs/route.config';\nimport {Label} from '../../shared/configs/labels.config';\nimport {Level} from '../../shared/configs/levels.config';\nimport {User} from '../../shared/models/user.model';\nimport {LogUtil} from '../../shared/utils/log.util';\n\n\n@Component({\n    selector: 'app-top-nav',\n    templateUrl: './top-nav.component.html',\n    styleUrls: ['./top-nav.component.scss']\n})\nexport class TopNavComponent implements OnInit {\n    pushRightClass: 'push-right';\n    avatar: String;\n    authUser: User;\n\n    constructor(public router: Router,\n                private translate: TranslateService,\n                private mainService: MainService,\n                private authService: AuthService) {\n\n        this.router.events.subscribe(val => {\n            if (val instanceof NavigationEnd && window.innerWidth <= 992 && this.isToggled()) {\n                this.toggleSidebar();\n            }\n        });\n\n    }\n\n    ngOnInit() {\n        this.avatar = this.authService.getAuthUserAvatar();\n        this.authUser = this.authService.getAuthUser();\n        LogUtil.ConsoleNag('this.avatar' + this.avatar);\n    }\n\n    isToggled(): boolean {\n        const dom: Element = document.querySelector('body');\n        return dom.classList.contains(this.pushRightClass);\n    }\n\n    toggleSidebar() {\n        const dom: any = document.querySelector('body');\n        dom.classList.toggle(this.pushRightClass);\n    }\n\n    onLogOut() {\n        localStorage.removeItem(Label.TOKEN);\n        this.router.navigate([RouteConfig.ROUTE_LOG_IN]).catch(\n            reason => {\n                LogUtil.ConsoleNag(`Could not navigate to login on log out, reason: ${reason}`);\n            }\n        );\n    }\n\n    changeLang(language: string) {\n        this.translate.use(language);\n    }\n\n    get isDispatcherManaging(): boolean {\n        return this.authService.getManagingUserLevel() === Level.DISPATCHER;\n    }\n\n    showManageCustomersPanel() {\n        this.router.navigate([RouteConfig.ROUTE_SEARCH_CUSTOMER]).catch(\n            reason => {\n                LogUtil.ConsoleNag(`Could not navigate to search customer, reason: ${reason}`);\n            }\n        );\n    }\n    showDefault(){\n        this.router.navigate([RouteConfig.ROUTE_DEFAULT])\n    }\n    showDispatcherPanel() {\n        this.router.navigate([RouteConfig.ROUTE_TRIP]).catch(\n            reason => {\n                LogUtil.ConsoleNag(`Could not navigate to trip, reason: ${reason}`);\n            }\n        );\n    }\n\n}\n"],"sourceRoot":""}